#ifndef _NPU_COUNTERS_H_
#define _NPU_COUNTERS_H_

/* NPU offload counters */
enum {
	GET_BUFID_FAIL = 0,
	WHILE_COUNT,
	RX_DESC_DDONE,
	ALL_GET_PKT_COUNT,
	DROP_PACKETS,
	ENQ_DEQ_WHILE_COUNT,
	ENQ_SRAM_COUNT,
	ENQ_SRAM_FULL_COUNT,
	ENQ_SRAM_FAIL_COUNT,
	DEQ_SRAM_COUNT,
	DEQ_SRAM_FAIL_BUFID_COUNT,
	DEQ_SRAM_FAIL_LEN_COUNT,
	TO_HOSTAPD_COUNT,
	BA_IN_ORDER_PKT_COUNT,
	BA_DUPL_PKT_COUNT,
	BA_OLD_PKT_COUNT,
	BA_WITHIN_WS_PKT_COUNT,
	BA_POP_PKT_COUNT,
	BA_AMSDU_COUNT,
	AMPDU_COUNT,
	BA_NO_MEM_COUNT,
	TO_QDMA_COUNT,
	TO_QDMA_COUNT_88,
	TO_QDMA_COUNT_512,
	TO_QDMA_COUNT_1518,
	TO_QDMA_BYTE_LO,
	TO_QDMA_BYTE_HI,
	HOST_APD_ERROR_COUNT,
	QDMA_RETURN_FAIL_COUNT,
	SCATTER_CNT_MORE1,
	BIGGER_PACKET,
	ENQ_BIGPKT_TOSRAM_FAIL_COUNT,
	SCATTER_PKT_ONE_BUFID,
	GET_BUFID_FOR_BIGPKT_FAIL,
	BIGPKT_TO_HOSTADPT_ERROR_COUNT,
	API_HOSTADPT_SEND,
	ENQ_BIGPKT_SRAM_FULL_COUNT,
	ENQ_BIGPKT_SRAM_COUNT,
	NO_BIGPKT_COUNT,
	CHECK_BIGPKT,
	CHECK_BIGPKT2,
	CHECK_BIGPKT_OK,
	CHECK_BIGPKT_ISLAST,
	CHECK_BIGPKT_IDX_FAIL,
	CHECK_BIGPKT_CNT_FAIL,
	CHECK_BIGPKT_FAIL,
	CHECK_BIGPKT_OVER_RETRY,
	BIGPKT_TO_HOSTAPD_COUNT,
	BIGPKT_DESC_FREE_COUNT,
	BA_AMSDU_MISS,
	BA_TIMEOUT_FLUSH100,
	BA_TIMEOUT_FLUSH250,
	BA_ENQ_DUP_SEQ,
	BA_REORDERING_NODE_FREE_COUNT,
	BA_REORDERINT_NODE_ALLOC_FAIL,
	BA_REORDERING_NODE_ALLOC_COUNT,
	BA_REORDERING_NODE_ALLOC_DRAM_COUNT,
	BA_ENQ_QLEN_ERROR_COUNT,
	BA_WCID_ERROR,
	HOSTADPT_API_Q_FULL,
	ALL_GET_PKT_COUNT_512,
	ALL_GET_PKT_COUNT_1518,
	ALL_GET_PKT_COUNT_OTHER,
	TDMA_TXDESC_FULL_COUNT,
	TDMA_TXDESC_FULL_COUNT2,
	TDMA_RX_GET_PKT,
	RX_G4_PKT_NO_SN,
	BAR_WCID_ERROR,
	RX_PIPE_Q_FULL,
	RX_PIPE_Q3_Q4_FULL,
	PIPE_Q3_ENQ,
	PIPE_Q3_DEQ,
	PIPE_Q4_ENQ,
	PIPE_Q4_DEQ,
	ENQ_PKT_TO_SLOWPATH_CASE1,
	ENQ_PKT_TO_SLOWPATH_CASE2,
	ENQ_PKT_TO_SLOWPATH_CASE3,
	ENQ_PIPELINE_PKT_CNT,
	DEQ_PIPELINE_PKT_CNT,
	TDMA_TXRING_SEND,
	BUFID_FREE_CASE1,
	MSDU_PG_2G_PKT,
	MSDU_PG_5G_PKT,
	MSDU_PG_6G_PKT,
	MSDU_PG_READ_FAIL,
	TX_PKT_FROM_HOSTADPT,
	TX_FULL_DESC,
	TX_DONE_GET_PKT,
	TX_SLOW_PATH_Q_FULL,
	TX_SLOW_PATH_TXRING_FULL,
	TX_SLOW_PATH_TOO_MUCH_PKT,
	PN_CHECK_FAIL,
	SKB_BUFID_STATE_ABNORMAL1,	// err state when freeing skb(setting to BUF_IN_POOL)
	SKB_BUFID_STATE_ABNORMAL2,	// err state when filling skb to Refill ring(setting to BUF_IN_RING)
	SKB_BUFID_STATE_ABNORMAL3,	// err state when checking skb from rxdmad_c ring(setting to BUF_FROM_RING)

	OFFLOAD_COUNTER_BOTTOM
};

#define NPU_COUNTER_NUM			OFFLOAD_COUNTER_BOTTOM

/* NPU util counters */

enum {
	QDMA_TXDESC_NULL_COUNT = 0,
	QDMA_FREE_BUFID_COUNT,
	QDMA_UNBIND_COUNT,
	QDMA_TO_ENQ_FAIL_COUNT,
	QDMA_TO_ENQ_FAIL_COUNT2,
	QDMA_DONE_COUNT,
	SKB_FREE_BUFID_COUNT,
	SKB_ALLOC_BUFID_COUNT,
	SKB_BUFID_ALLOC_FAIL,
	QDMA_TX_DSCP_IDX_INVALID,
	QDMA_TX_DSCP_INFO_ERROR,
	QDMA_DONE_DROP_BIT_ERROR,
	API_BUFF_SEND_BIGPKT,
	API_BUFF_SEND_NOMALPKT,
	HOSTADPT_API_DONE_COUNT,
	BMGR0_BUFID_OVERFLOW,
	MSDU_SKB_FREE_BUFID_COUNT,
	MSDU_SKB_BUFID_ALLOC_FAIL,
	MSDU_SKB_ALLOC_COUNT,
	TX_SKB_FREE_BUFID_COUNT,
	TX_SKB_ALLOC_BUFID_COUNT,
	TX_SKB_BUFID_ALLOC_FAIL,
	TX_DONE_VER_ABNORMAL,
	TX_DONE_TOKEN_LEAK,
	TX_BUF_POOL_ABNORMAL_ALLOC,
	TX_BUF_POOL_ABNORMAL_FREE,
	WIFI_TX_TOKEN_ABNORMAL,
	WIFI_TX_MSDU_PKT,

	UTIL_COUNTER_BOTTOM
};

#define UTIL_COUNTER_NUM		UTIL_COUNTER_BOTTOM

#define NPU_COUNTER_GROUPS		3	/* ring0 + ring1 + util */
#define NPU_COUNTER(addr, i)		__raw_readl((u8 __iomem *)addr + ((i) << 2))

void __iomem *get_npu_counter_addr(u32 group);

#endif /* _NPU_COUNTERS_H_ */
